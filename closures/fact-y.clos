program (arguments0092) =
   fun intToString_code00BC (i0094) =
      if IntLt(i0094,0) then
         let _t10096 = IntNeg(i0094) in
         let _t00095 = intToString_code00BC (_t10096) in
         let _t20097 = call _mml_concat("-",_t00095) in
            ret _t20097
      else if IntEq(i0094,0) then
         ret "0"
      else if IntEq(i0094,1) then
         ret "1"
      else if IntEq(i0094,2) then
         ret "2"
      else if IntEq(i0094,3) then
         ret "3"
      else if IntEq(i0094,4) then
         ret "4"
      else if IntEq(i0094,5) then
         ret "5"
      else if IntEq(i0094,6) then
         ret "6"
      else if IntEq(i0094,7) then
         ret "7"
      else if IntEq(i0094,8) then
         ret "8"
      else if IntEq(i0094,9) then
         ret "9"
      else
         let _t40099 =
            if IntNEq(10,0) then
               let _t5009A = IntDiv(i0094,10) in
                  ret _t5009A
            else
               let _t6009B = call _mml_fail("Divide by zero") in
                  ret _t6009B
         in
         let _t30098 = intToString_code00BC (_t40099) in
         let _t8009D =
            if IntNEq(10,0) then
               let _t9009E = IntMod(i0094,10) in
                  ret _t9009E
            else
               let _t10009F = call _mml_fail("Remainder by zero") in
                  ret _t10009F
         in
         let _t7009C = intToString_code00BC (_t8009D) in
         let _t1100A0 = call _mml_concat(_t30098,_t7009C) in
            ret _t1100A0
   in
   fun y_code00BA (f00A2) =
      fun y1_code00C3 (y100C4,x00A4) =
         let f00C5 = #1(y100C4) in
         fun g_code00C8 (g00C9,x00A6) =
            let f00CA = #1(g00C9) in
            let _t1200A7 = y_code00BA (f00CA) in
            let cp00CB = #0(_t1200A7) in
               cp00CB (_t1200A7,x00A6)
         in
         let g00A5 = [g_code00C8,f00C5] in
         let cp00C6 = #0(f00C5) in
         let _t1300A8 = cp00C6 (f00C5,g00A5) in
         let cp00C7 = #0(_t1300A8) in
            cp00C7 (_t1300A8,x00A4)
      in
      let y100A3 = [y1_code00C3,f00A2] in
         ret y100A3
   in
   fun factY_code00BD (factY00BE,fact00AA) =
      fun factY1_code00BF (factY100C0,n00AC) =
         let fact00C1 = #1(factY100C0) in
            if IntEq(n00AC,0) then
               ret 1
            else
               let _t1500AE = IntSub(n00AC,1) in
               let cp00C2 = #0(fact00C1) in
               let _t1400AD = cp00C2 (fact00C1,_t1500AE) in
               let _t1600AF = IntMul(n00AC,_t1400AD) in
                  ret _t1600AF
      in
      let factY100AB = [factY1_code00BF,fact00AA] in
         ret factY100AB
   in
   let factY00A9 = [factY_code00BD] in
   let fact00B0 = y_code00BA (factY00A9) in
   let n00B1 = ret 5 in
   let cp00BB = #0(fact00B0) in
   let fact_n00B2 = cp00BB (fact00B0,n00B1) in
   let un00B3 = call _mml_print("fact ") in
   let _t1700B5 = intToString_code00BC (n00B1) in
   let un00B4 = call _mml_print(_t1700B5) in
   let un00B6 = call _mml_print(" = ") in
   let _t1800B8 = intToString_code00BC (fact_n00B2) in
   let un00B7 = call _mml_print(_t1800B8) in
   let un00B9 = call _mml_print("\n") in
      ret 0
