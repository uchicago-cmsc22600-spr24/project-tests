ptr $intToString_code00D0: {
   fun $intToString_code00D0 (i0120) {
      goto $intToString_code00BC_hdr011F (i0120)
   }
   and $intToString_code00BC_hdr011F (i0121) {
      if IntLt (i0121, 0)
         then goto $then0122 (i0121)
         else goto $else0127 (i0121)
   }
   and $else0127 (i0128) {
      if IntEq (i0128, 0)
         then goto $then0129 ()
         else goto $else012A (i0128)
   }
   and $else012A (i012B) {
      if IntEq (i012B, 1)
         then goto $then012C ()
         else goto $else012D (i012B)
   }
   and $else012D (i012E) {
      if IntEq (i012E, 2)
         then goto $then012F ()
         else goto $else0130 (i012E)
   }
   and $else0130 (i0131) {
      if IntEq (i0131, 3)
         then goto $then0132 ()
         else goto $else0133 (i0131)
   }
   and $else0133 (i0134) {
      if IntEq (i0134, 4)
         then goto $then0135 ()
         else goto $else0136 (i0134)
   }
   and $else0136 (i0137) {
      if IntEq (i0137, 5)
         then goto $then0138 ()
         else goto $else0139 (i0137)
   }
   and $else0139 (i013A) {
      if IntEq (i013A, 6)
         then goto $then013B ()
         else goto $else013C (i013A)
   }
   and $else013C (i013D) {
      if IntEq (i013D, 7)
         then goto $then013E ()
         else goto $else013F (i013D)
   }
   and $else013F (i0140) {
      if IntEq (i0140, 8)
         then goto $then0141 ()
         else goto $else0142 (i0140)
   }
   and $else0142 (i0143) {
      if IntEq (i0143, 9)
         then goto $then0144 ()
         else goto $else0145 (i0143)
   }
   and $else0145 (i0146) {
      if IntNEq (10, 0)
         then goto $then0157 (i0146)
         else goto $else015A (i0146)
   }
   and $else015A (i015B) {
      let _t6015C = call _mml_fail ("Divide by zero")
      goto $join0147 (_t6015C, i015B)
   }
   and $then0157 (i0158) {
      let _t50159 = IntDiv (i0158,10)
      goto $join0147 (_t50159, i0158)
   }
   and $join0147 (_t40148, i0149) {
      let _t3014A = apply $intToString_code00D0 (_t40148)
      if IntNEq (10, 0)
         then goto $then0150 (i0149, _t3014A)
         else goto $else0154 (_t3014A)
   }
   and $else0154 (_t30155) {
      let _t100156 = call _mml_fail ("Remainder by zero")
      goto $join014B (_t100156, _t30155)
   }
   and $then0150 (i0151, _t30152) {
      let _t90153 = IntMod (i0151,10)
      goto $join014B (_t90153, _t30152)
   }
   and $join014B (_t8014C, _t3014D) {
      let _t7014E = apply $intToString_code00D0 (_t8014C)
      let _t11014F = call _mml_concat (_t3014D,_t7014E)
      ret _t11014F
   }
   and $then0144 () {
      ret "9"
   }
   and $then0141 () {
      ret "8"
   }
   and $then013E () {
      ret "7"
   }
   and $then013B () {
      ret "6"
   }
   and $then0138 () {
      ret "5"
   }
   and $then0135 () {
      ret "4"
   }
   and $then0132 () {
      ret "3"
   }
   and $then012F () {
      ret "2"
   }
   and $then012C () {
      ret "1"
   }
   and $then0129 () {
      ret "0"
   }
   and $then0122 (i0123) {
      let _t10124 = IntNeg (i0123)
      let _t00125 = apply $intToString_code00D0 (_t10124)
      let _t20126 = call _mml_concat ("-",_t00125)
      ret _t20126
   }
}
ptr $boolToString_code00D1: {
   fun $boolToString_code00D1 (b011A) {
      if IntEq (1, b011A)
         then goto $tlab011B (b011A)
         else goto $flab011D (b011A)
   }
   and $flab011D (b011E) {
      ret "False"
   }
   and $tlab011B (b011C) {
      ret "True"
   }
}
i63 $preEven1_code00D3: {
   fun $preEven1_code00D3 (preEven10102, x0103) {
      let zero0104 = #1(preEven10102)
      let one0105 = #2(preEven10102)
      let preEven0106 = #3(preEven10102)
      let odd0107 = #4(preEven10102)
      if IntLt (x0103, zero0104)
         then goto $then0108 (x0103, preEven0106, odd0107)
         else goto $else010F (x0103, one0105, odd0107)
   }
   and $else010F (x0110, one0111, odd0112) {
      if IntEq (x0110, 0)
         then goto $then0113 ()
         else goto $else0114 (x0110, one0111, odd0112)
   }
   and $else0114 (x0115, one0116, odd0117) {
      let _t140118 = IntSub (x0115,one0116)
      let cp0119 = #0(odd0117)
      apply cp0119 (odd0117, _t140118)
   }
   and $then0113 () {
      ret 1
   }
   and $then0108 (x0109, preEven010A, odd010B) {
      let _t12010C = apply $preEven_code00D2 (preEven010A,odd010B)
      let _t13010D = IntNeg (x0109)
      let cp010E = #0(_t12010C)
      apply cp010E (_t12010C, _t13010D)
   }
}
ptr $preEven_code00D2: {
   fun $preEven_code00D2 (preEven00FD, odd00FE) {
      let zero00FF = #0(preEven00FD)
      let one0100 = #1(preEven00FD)
      let preEven10101 = alloc [$preEven1_code00D3,zero00FF,one0100,preEven00FD,odd00FE]
      ret preEven10101
   }
}
i63 $odd_code00D4: {
   fun $odd_code00D4 (odd00E4, x00E5) {
      goto $odd_code00BE_hdr00E3 (odd00E4, x00E5)
   }
   and $odd_code00BE_hdr00E3 (odd00E6, x00E7) {
      let zero00E8 = #1(odd00E6)
      let one00E9 = #2(odd00E6)
      let preEven00EA = #3(odd00E6)
      if IntLt (x00E7, zero00E8)
         then goto $then00EB (x00E7, odd00E6)
         else goto $else00EF (x00E7, odd00E6, one00E9, preEven00EA)
   }
   and $else00EF (x00F0, odd00F1, one00F2, preEven00F3) {
      if IntEq (x00F0, 0)
         then goto $then00F4 ()
         else goto $else00F5 (x00F0, odd00F1, one00F2, preEven00F3)
   }
   and $else00F5 (x00F6, odd00F7, one00F8, preEven00F9) {
      let _t1600FA = apply $preEven_code00D2 (preEven00F9,odd00F7)
      let _t1700FB = IntSub (x00F6,one00F8)
      let cp00FC = #0(_t1600FA)
      apply cp00FC (_t1600FA, _t1700FB)
   }
   and $then00F4 () {
      ret 0
   }
   and $then00EB (x00EC, odd00ED) {
      let _t1500EE = IntNeg (x00EC)
      goto $odd_code00BE_hdr00E3 (odd00ED, _t1500EE)
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments00D6) {
      let preEven00D7 = alloc [0,1]
      let odd00D8 = alloc [$odd_code00D4,0,1,preEven00D7]
      let even00D9 = apply $preEven_code00D2 (preEven00D7,odd00D8)
      let cp00DA = #0(even00D9)
      let even_n00DB = apply cp00DA (even00D9,101)
      let un00DC = call _mml_print ("even ")
      let _t1800DD = apply $intToString_code00D0 (101)
      let un00DE = call _mml_print (_t1800DD)
      let un00DF = call _mml_print (" = ")
      let _t1900E0 = apply $boolToString_code00D1 (even_n00DB)
      let un00E1 = call _mml_print (_t1900E0)
      let un00E2 = call _mml_print ("\n")
      ret 0
   }
}
