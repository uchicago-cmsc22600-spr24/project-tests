ptr $intToString_code00CD: {
   fun $intToString_code00CD (i00FD) {
      goto $intToString_code00BC_hdr00FC (i00FD)
   }
   and $intToString_code00BC_hdr00FC (i00FE) {
      if IntLt (i00FE, 0)
         then goto $then00FF (i00FE)
         else goto $else0104 (i00FE)
   }
   and $else0104 (i0105) {
      if IntEq (i0105, 0)
         then goto $then0106 ()
         else goto $else0107 (i0105)
   }
   and $else0107 (i0108) {
      if IntEq (i0108, 1)
         then goto $then0109 ()
         else goto $else010A (i0108)
   }
   and $else010A (i010B) {
      if IntEq (i010B, 2)
         then goto $then010C ()
         else goto $else010D (i010B)
   }
   and $else010D (i010E) {
      if IntEq (i010E, 3)
         then goto $then010F ()
         else goto $else0110 (i010E)
   }
   and $else0110 (i0111) {
      if IntEq (i0111, 4)
         then goto $then0112 ()
         else goto $else0113 (i0111)
   }
   and $else0113 (i0114) {
      if IntEq (i0114, 5)
         then goto $then0115 ()
         else goto $else0116 (i0114)
   }
   and $else0116 (i0117) {
      if IntEq (i0117, 6)
         then goto $then0118 ()
         else goto $else0119 (i0117)
   }
   and $else0119 (i011A) {
      if IntEq (i011A, 7)
         then goto $then011B ()
         else goto $else011C (i011A)
   }
   and $else011C (i011D) {
      if IntEq (i011D, 8)
         then goto $then011E ()
         else goto $else011F (i011D)
   }
   and $else011F (i0120) {
      if IntEq (i0120, 9)
         then goto $then0121 ()
         else goto $else0122 (i0120)
   }
   and $else0122 (i0123) {
      if IntNEq (10, 0)
         then goto $then0134 (i0123)
         else goto $else0137 (i0123)
   }
   and $else0137 (i0138) {
      let _t60139 = call _mml_fail ("Divide by zero")
      goto $join0124 (_t60139, i0138)
   }
   and $then0134 (i0135) {
      let _t50136 = IntDiv (i0135,10)
      goto $join0124 (_t50136, i0135)
   }
   and $join0124 (_t40125, i0126) {
      let _t30127 = apply $intToString_code00CD (_t40125)
      if IntNEq (10, 0)
         then goto $then012D (i0126, _t30127)
         else goto $else0131 (_t30127)
   }
   and $else0131 (_t30132) {
      let _t100133 = call _mml_fail ("Remainder by zero")
      goto $join0128 (_t100133, _t30132)
   }
   and $then012D (i012E, _t3012F) {
      let _t90130 = IntMod (i012E,10)
      goto $join0128 (_t90130, _t3012F)
   }
   and $join0128 (_t80129, _t3012A) {
      let _t7012B = apply $intToString_code00CD (_t80129)
      let _t11012C = call _mml_concat (_t3012A,_t7012B)
      ret _t11012C
   }
   and $then0121 () {
      ret "9"
   }
   and $then011E () {
      ret "8"
   }
   and $then011B () {
      ret "7"
   }
   and $then0118 () {
      ret "6"
   }
   and $then0115 () {
      ret "5"
   }
   and $then0112 () {
      ret "4"
   }
   and $then010F () {
      ret "3"
   }
   and $then010C () {
      ret "2"
   }
   and $then0109 () {
      ret "1"
   }
   and $then0106 () {
      ret "0"
   }
   and $then00FF (i0100) {
      let _t10101 = IntNeg (i0100)
      let _t00102 = apply $intToString_code00CD (_t10101)
      let _t20103 = call _mml_concat ("-",_t00102)
      ret _t20103
   }
}
any $g_code00D0: {
   fun $g_code00D0 (g00F7, x00F8) {
      let f00F9 = #1(g00F7)
      let _t1200FA = apply $y_code00CE (f00F9)
      let cp00FB = #0(_t1200FA)
      apply cp00FB (_t1200FA, x00F8)
   }
}
any $y1_code00CF: {
   fun $y1_code00CF (y100F0, x00F1) {
      let f00F2 = #1(y100F0)
      let g00F3 = alloc [$g_code00D0,f00F2]
      let cp00F4 = #0(f00F2)
      let _t1300F5 = apply cp00F4 (f00F2,g00F3)
      let cp00F6 = #0(_t1300F5)
      apply cp00F6 (_t1300F5, x00F1)
   }
}
ptr $y_code00CE: {
   fun $y_code00CE (f00EE) {
      let y100EF = alloc [$y1_code00CF,f00EE]
      ret y100EF
   }
}
i63 $factY1_code00D2: {
   fun $factY1_code00D2 (factY100E3, n00E4) {
      let fact00E5 = #1(factY100E3)
      if IntEq (n00E4, 0)
         then goto $then00E6 ()
         else goto $else00E7 (n00E4, fact00E5)
   }
   and $else00E7 (n00E8, fact00E9) {
      let _t1500EA = IntSub (n00E8,1)
      let cp00EB = #0(fact00E9)
      let _t1400EC = apply cp00EB (fact00E9,_t1500EA)
      let _t1600ED = IntMul (n00E8,_t1400EC)
      ret _t1600ED
   }
   and $then00E6 () {
      ret 1
   }
}
ptr $factY_code00D1: {
   fun $factY_code00D1 (factY00E0, fact00E1) {
      let factY100E2 = alloc [$factY1_code00D2,fact00E1]
      ret factY100E2
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments00D4) {
      let factY00D5 = alloc [$factY_code00D1]
      let fact00D6 = apply $y_code00CE (factY00D5)
      let cp00D7 = #0(fact00D6)
      let fact_n00D8 = apply cp00D7 (fact00D6,5)
      let un00D9 = call _mml_print ("fact ")
      let _t1700DA = apply $intToString_code00CD (5)
      let un00DB = call _mml_print (_t1700DA)
      let un00DC = call _mml_print (" = ")
      let _t1800DD = apply $intToString_code00CD (fact_n00D8)
      let un00DE = call _mml_print (_t1800DD)
      let un00DF = call _mml_print ("\n")
      ret 0
   }
}
