any $fst_code0117: {
   fun $fst_code0117 (p019C) {
      let a019D = #0(p019C)
      let _019E = #1(p019C)
      ret a019D
   }
}
any $snd_code0118: {
   fun $snd_code0118 (p0199) {
      let _019A = #0(p0199)
      let b019B = #1(p0199)
      ret b019B
   }
}
i63 $length_code0119: {
   fun $length_code0119 (l0190) {
      goto $length_code0107_hdr018F (l0190)
   }
   and $length_code0107_hdr018F (l0191) {
      if Boxed (l0191)
         then goto $boxed0194 (l0191)
         else goto $unboxed0192 (l0191)
   }
   and $boxed0194 (l0195) {
      let r0196 = #1(l0195)
      let _t00197 = apply $length_code0119 (r0196)
      let _t10198 = IntAdd (1,_t00197)
      ret _t10198
   }
   and $unboxed0192 (l0193) {
      ret 0
   }
}
i63 $appf_code011C: {
   fun $appf_code011C (appf017A, arg017B) {
      goto $appf_code0112_hdr0179 (appf017A, arg017B)
   }
   and $appf_code0112_hdr0179 (appf017C, arg017D) {
      let f017E = #0(appf017C)
      let _t2017F = apply $snd_code0118 (arg017D)
      if Boxed (_t2017F)
         then goto $boxed0182 (_t2017F, arg017D, appf017C, f017E)
         else goto $unboxed0180 (_t2017F)
   }
   and $boxed0182 (_t20183, arg0184, appf0185, f0186) {
      let x0187 = #0(_t20183)
      let xs0188 = #1(_t20183)
      let i0189 = apply $fst_code0117 (arg0184)
      let _t4018A = alloc [i0189,x0187]
      let cp018B = #0(f0186)
      let un018C = apply cp018B (f0186,_t4018A)
      let _t6018D = IntAdd (i0189,1)
      let _t5018E = alloc [_t6018D,xs0188]
      goto $appf_code0112_hdr0179 (appf0185, _t5018E)
   }
   and $unboxed0180 (_t20181) {
      ret 0
   }
}
i63 $appi1_code011B: {
   fun $appi1_code011B (appi10174, l0175) {
      let f0176 = #1(appi10174)
      let appf0177 = alloc [f0176]
      let _t70178 = alloc [0,l0175]
      apply $appf_code011C (appf0177, _t70178)
   }
}
ptr $appi_code011A: {
   fun $appi_code011A (f0172) {
      let appi10173 = alloc [$appi1_code011B,f0172]
      ret appi10173
   }
}
ptr $intToString_code011D: {
   fun $intToString_code011D (i0135) {
      goto $intToString_code0108_hdr0134 (i0135)
   }
   and $intToString_code0108_hdr0134 (i0136) {
      if IntLt (i0136, 0)
         then goto $then0137 (i0136)
         else goto $else013C (i0136)
   }
   and $else013C (i013D) {
      if IntEq (i013D, 0)
         then goto $then013E ()
         else goto $else013F (i013D)
   }
   and $else013F (i0140) {
      if IntEq (i0140, 1)
         then goto $then0141 ()
         else goto $else0142 (i0140)
   }
   and $else0142 (i0143) {
      if IntEq (i0143, 2)
         then goto $then0144 ()
         else goto $else0145 (i0143)
   }
   and $else0145 (i0146) {
      if IntEq (i0146, 3)
         then goto $then0147 ()
         else goto $else0148 (i0146)
   }
   and $else0148 (i0149) {
      if IntEq (i0149, 4)
         then goto $then014A ()
         else goto $else014B (i0149)
   }
   and $else014B (i014C) {
      if IntEq (i014C, 5)
         then goto $then014D ()
         else goto $else014E (i014C)
   }
   and $else014E (i014F) {
      if IntEq (i014F, 6)
         then goto $then0150 ()
         else goto $else0151 (i014F)
   }
   and $else0151 (i0152) {
      if IntEq (i0152, 7)
         then goto $then0153 ()
         else goto $else0154 (i0152)
   }
   and $else0154 (i0155) {
      if IntEq (i0155, 8)
         then goto $then0156 ()
         else goto $else0157 (i0155)
   }
   and $else0157 (i0158) {
      if IntEq (i0158, 9)
         then goto $then0159 ()
         else goto $else015A (i0158)
   }
   and $else015A (i015B) {
      if IntNEq (10, 0)
         then goto $then016C (i015B)
         else goto $else016F (i015B)
   }
   and $else016F (i0170) {
      let _t140171 = call _mml_fail ("Divide by zero")
      goto $join015C (_t140171, i0170)
   }
   and $then016C (i016D) {
      let _t13016E = IntDiv (i016D,10)
      goto $join015C (_t13016E, i016D)
   }
   and $join015C (_t12015D, i015E) {
      let _t11015F = apply $intToString_code011D (_t12015D)
      if IntNEq (10, 0)
         then goto $then0165 (i015E, _t11015F)
         else goto $else0169 (_t11015F)
   }
   and $else0169 (_t11016A) {
      let _t18016B = call _mml_fail ("Remainder by zero")
      goto $join0160 (_t18016B, _t11016A)
   }
   and $then0165 (i0166, _t110167) {
      let _t170168 = IntMod (i0166,10)
      goto $join0160 (_t170168, _t110167)
   }
   and $join0160 (_t160161, _t110162) {
      let _t150163 = apply $intToString_code011D (_t160161)
      let _t190164 = call _mml_concat (_t110162,_t150163)
      ret _t190164
   }
   and $then0159 () {
      ret "9"
   }
   and $then0156 () {
      ret "8"
   }
   and $then0153 () {
      ret "7"
   }
   and $then0150 () {
      ret "6"
   }
   and $then014D () {
      ret "5"
   }
   and $then014A () {
      ret "4"
   }
   and $then0147 () {
      ret "3"
   }
   and $then0144 () {
      ret "2"
   }
   and $then0141 () {
      ret "1"
   }
   and $then013E () {
      ret "0"
   }
   and $then0137 (i0138) {
      let _t90139 = IntNeg (i0138)
      let _t8013A = apply $intToString_code011D (_t90139)
      let _t10013B = call _mml_concat ("-",_t8013A)
      ret _t10013B
   }
}
i63 $printArg_code011E: {
   fun $printArg_code011E (printArg012A, arg012B) {
      let un012C = call _mml_print ("arg ")
      let _t21012D = apply $fst_code0117 (arg012B)
      let _t20012E = apply $intToString_code011D (_t21012D)
      let un012F = call _mml_print (_t20012E)
      let un0130 = call _mml_print (" = ")
      let _t220131 = apply $snd_code0118 (arg012B)
      let un0132 = call _mml_print (_t220131)
      let _t230133 = call _mml_print ("\n")
      ret _t230133
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments0120) {
      let printArg0121 = alloc [$printArg_code011E]
      let nArgs0122 = apply $length_code0119 (arguments0120)
      let _t260123 = apply $intToString_code011D (nArgs0122)
      let _t250124 = call _mml_concat (_t260123,"\n")
      let _t240125 = call _mml_concat ("# args = ",_t250124)
      let un0126 = call _mml_print (_t240125)
      let _t270127 = apply $appi_code011A (printArg0121)
      let cp0128 = #0(_t270127)
      let un0129 = apply cp0128 (_t270127,arguments0120)
      ret 0
   }
}
