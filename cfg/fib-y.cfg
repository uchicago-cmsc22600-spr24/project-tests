ptr $intToString_code00DE: {
   fun $intToString_code00DE (i0117) {
      goto $intToString_code00CA_hdr0116 (i0117)
   }
   and $intToString_code00CA_hdr0116 (i0118) {
      if IntLt (i0118, 0)
         then goto $then0119 (i0118)
         else goto $else011E (i0118)
   }
   and $else011E (i011F) {
      if IntEq (i011F, 0)
         then goto $then0120 ()
         else goto $else0121 (i011F)
   }
   and $else0121 (i0122) {
      if IntEq (i0122, 1)
         then goto $then0123 ()
         else goto $else0124 (i0122)
   }
   and $else0124 (i0125) {
      if IntEq (i0125, 2)
         then goto $then0126 ()
         else goto $else0127 (i0125)
   }
   and $else0127 (i0128) {
      if IntEq (i0128, 3)
         then goto $then0129 ()
         else goto $else012A (i0128)
   }
   and $else012A (i012B) {
      if IntEq (i012B, 4)
         then goto $then012C ()
         else goto $else012D (i012B)
   }
   and $else012D (i012E) {
      if IntEq (i012E, 5)
         then goto $then012F ()
         else goto $else0130 (i012E)
   }
   and $else0130 (i0131) {
      if IntEq (i0131, 6)
         then goto $then0132 ()
         else goto $else0133 (i0131)
   }
   and $else0133 (i0134) {
      if IntEq (i0134, 7)
         then goto $then0135 ()
         else goto $else0136 (i0134)
   }
   and $else0136 (i0137) {
      if IntEq (i0137, 8)
         then goto $then0138 ()
         else goto $else0139 (i0137)
   }
   and $else0139 (i013A) {
      if IntEq (i013A, 9)
         then goto $then013B ()
         else goto $else013C (i013A)
   }
   and $else013C (i013D) {
      if IntNEq (10, 0)
         then goto $then014E (i013D)
         else goto $else0151 (i013D)
   }
   and $else0151 (i0152) {
      let _t60153 = call _mml_fail ("Divide by zero")
      goto $join013E (_t60153, i0152)
   }
   and $then014E (i014F) {
      let _t50150 = IntDiv (i014F,10)
      goto $join013E (_t50150, i014F)
   }
   and $join013E (_t4013F, i0140) {
      let _t30141 = apply $intToString_code00DE (_t4013F)
      if IntNEq (10, 0)
         then goto $then0147 (i0140, _t30141)
         else goto $else014B (_t30141)
   }
   and $else014B (_t3014C) {
      let _t10014D = call _mml_fail ("Remainder by zero")
      goto $join0142 (_t10014D, _t3014C)
   }
   and $then0147 (i0148, _t30149) {
      let _t9014A = IntMod (i0148,10)
      goto $join0142 (_t9014A, _t30149)
   }
   and $join0142 (_t80143, _t30144) {
      let _t70145 = apply $intToString_code00DE (_t80143)
      let _t110146 = call _mml_concat (_t30144,_t70145)
      ret _t110146
   }
   and $then013B () {
      ret "9"
   }
   and $then0138 () {
      ret "8"
   }
   and $then0135 () {
      ret "7"
   }
   and $then0132 () {
      ret "6"
   }
   and $then012F () {
      ret "5"
   }
   and $then012C () {
      ret "4"
   }
   and $then0129 () {
      ret "3"
   }
   and $then0126 () {
      ret "2"
   }
   and $then0123 () {
      ret "1"
   }
   and $then0120 () {
      ret "0"
   }
   and $then0119 (i011A) {
      let _t1011B = IntNeg (i011A)
      let _t0011C = apply $intToString_code00DE (_t1011B)
      let _t2011D = call _mml_concat ("-",_t0011C)
      ret _t2011D
   }
}
any $g_code00E0: {
   fun $g_code00E0 (g0111, z0112) {
      let f0113 = #1(g0111)
      let _t120114 = apply $y_code00DF (f0113)
      let cp0115 = #0(_t120114)
      apply cp0115 (_t120114, 0)
   }
}
ptr $y_code00DF: {
   fun $y_code00DF (f010E) {
      let g010F = alloc [$g_code00E0,f010E]
      let cp0110 = #0(f010E)
      apply cp0110 (f010E, g010F)
   }
}
i63 $fibY2_code00E3: {
   fun $fibY2_code00E3 (fibY200FA, n00FB) {
      let fib00FC = #1(fibY200FA)
      let z00FD = #2(fibY200FA)
      if IntLte (n00FB, 1)
         then goto $then00FE ()
         else goto $else00FF (n00FB, fib00FC, z00FD)
   }
   and $else00FF (n0100, fib0101, z0102) {
      let cp0103 = #0(fib0101)
      let _t150104 = apply cp0103 (fib0101,z0102)
      let _t160105 = IntSub (n0100,1)
      let cp0106 = #0(_t150104)
      let _t140107 = apply cp0106 (_t150104,_t160105)
      let cp0108 = #0(fib0101)
      let _t180109 = apply cp0108 (fib0101,z0102)
      let _t19010A = IntSub (n0100,2)
      let cp010B = #0(_t180109)
      let _t17010C = apply cp010B (_t180109,_t19010A)
      let _t20010D = IntAdd (_t140107,_t17010C)
      ret _t20010D
   }
   and $then00FE () {
      ret 1
   }
}
ptr $fibY1_code00E2: {
   fun $fibY1_code00E2 (fibY100F6, z00F7) {
      let fib00F8 = #1(fibY100F6)
      let fibY200F9 = alloc [$fibY2_code00E3,fib00F8,z00F7]
      ret fibY200F9
   }
}
ptr $fibY_code00E1: {
   fun $fibY_code00E1 (fibY00F3, fib00F4) {
      let fibY100F5 = alloc [$fibY1_code00E2,fib00F4]
      ret fibY100F5
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments00E5) {
      let fibY00E6 = alloc [$fibY_code00E1]
      let _t2100E7 = apply $y_code00DF (fibY00E6)
      let cp00E8 = #0(_t2100E7)
      let fib00E9 = apply cp00E8 (_t2100E7,0)
      let cp00EA = #0(fib00E9)
      let fib_n00EB = apply cp00EA (fib00E9,20)
      let un00EC = call _mml_print ("fib ")
      let _t2300ED = apply $intToString_code00DE (20)
      let un00EE = call _mml_print (_t2300ED)
      let un00EF = call _mml_print (" = ")
      let _t2400F0 = apply $intToString_code00DE (fib_n00EB)
      let un00F1 = call _mml_print (_t2400F0)
      let un00F2 = call _mml_print ("\n")
      ret 0
   }
}
