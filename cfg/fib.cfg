ptr $intToString_code0095: {
   fun $intToString_code0095 (i00AD) {
      goto $intToString_code0093_hdr00AC (i00AD)
   }
   and $intToString_code0093_hdr00AC (i00AE) {
      if IntLt (i00AE, 0)
         then goto $then00AF (i00AE)
         else goto $else00B4 (i00AE)
   }
   and $else00B4 (i00B5) {
      if IntEq (i00B5, 0)
         then goto $then00B6 ()
         else goto $else00B7 (i00B5)
   }
   and $else00B7 (i00B8) {
      if IntEq (i00B8, 1)
         then goto $then00B9 ()
         else goto $else00BA (i00B8)
   }
   and $else00BA (i00BB) {
      if IntEq (i00BB, 2)
         then goto $then00BC ()
         else goto $else00BD (i00BB)
   }
   and $else00BD (i00BE) {
      if IntEq (i00BE, 3)
         then goto $then00BF ()
         else goto $else00C0 (i00BE)
   }
   and $else00C0 (i00C1) {
      if IntEq (i00C1, 4)
         then goto $then00C2 ()
         else goto $else00C3 (i00C1)
   }
   and $else00C3 (i00C4) {
      if IntEq (i00C4, 5)
         then goto $then00C5 ()
         else goto $else00C6 (i00C4)
   }
   and $else00C6 (i00C7) {
      if IntEq (i00C7, 6)
         then goto $then00C8 ()
         else goto $else00C9 (i00C7)
   }
   and $else00C9 (i00CA) {
      if IntEq (i00CA, 7)
         then goto $then00CB ()
         else goto $else00CC (i00CA)
   }
   and $else00CC (i00CD) {
      if IntEq (i00CD, 8)
         then goto $then00CE ()
         else goto $else00CF (i00CD)
   }
   and $else00CF (i00D0) {
      if IntEq (i00D0, 9)
         then goto $then00D1 ()
         else goto $else00D2 (i00D0)
   }
   and $else00D2 (i00D3) {
      if IntNEq (10, 0)
         then goto $then00E4 (i00D3)
         else goto $else00E7 (i00D3)
   }
   and $else00E7 (i00E8) {
      let _t600E9 = call _mml_fail ("Divide by zero")
      goto $join00D4 (_t600E9, i00E8)
   }
   and $then00E4 (i00E5) {
      let _t500E6 = IntDiv (i00E5,10)
      goto $join00D4 (_t500E6, i00E5)
   }
   and $join00D4 (_t400D5, i00D6) {
      let _t300D7 = apply $intToString_code0095 (_t400D5)
      if IntNEq (10, 0)
         then goto $then00DD (i00D6, _t300D7)
         else goto $else00E1 (_t300D7)
   }
   and $else00E1 (_t300E2) {
      let _t1000E3 = call _mml_fail ("Remainder by zero")
      goto $join00D8 (_t1000E3, _t300E2)
   }
   and $then00DD (i00DE, _t300DF) {
      let _t900E0 = IntMod (i00DE,10)
      goto $join00D8 (_t900E0, _t300DF)
   }
   and $join00D8 (_t800D9, _t300DA) {
      let _t700DB = apply $intToString_code0095 (_t800D9)
      let _t1100DC = call _mml_concat (_t300DA,_t700DB)
      ret _t1100DC
   }
   and $then00D1 () {
      ret "9"
   }
   and $then00CE () {
      ret "8"
   }
   and $then00CB () {
      ret "7"
   }
   and $then00C8 () {
      ret "6"
   }
   and $then00C5 () {
      ret "5"
   }
   and $then00C2 () {
      ret "4"
   }
   and $then00BF () {
      ret "3"
   }
   and $then00BC () {
      ret "2"
   }
   and $then00B9 () {
      ret "1"
   }
   and $then00B6 () {
      ret "0"
   }
   and $then00AF (i00B0) {
      let _t100B1 = IntNeg (i00B0)
      let _t000B2 = apply $intToString_code0095 (_t100B1)
      let _t200B3 = call _mml_concat ("-",_t000B2)
      ret _t200B3
   }
}
i63 $fib_code0096: {
   fun $fib_code0096 (n00A2) {
      goto $fib_code0092_hdr00A1 (n00A2)
   }
   and $fib_code0092_hdr00A1 (n00A3) {
      if IntLte (n00A3, 1)
         then goto $then00A4 ()
         else goto $else00A5 (n00A3)
   }
   and $else00A5 (n00A6) {
      let _t1300A7 = IntSub (n00A6,1)
      let _t1200A8 = apply $fib_code0096 (_t1300A7)
      let _t1500A9 = IntSub (n00A6,2)
      let _t1400AA = apply $fib_code0096 (_t1500A9)
      let _t1600AB = IntAdd (_t1200A8,_t1400AA)
      ret _t1600AB
   }
   and $then00A4 () {
      ret 1
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments0098) {
      let fib_n0099 = apply $fib_code0096 (20)
      let un009A = call _mml_print ("fib ")
      let _t17009B = apply $intToString_code0095 (20)
      let un009C = call _mml_print (_t17009B)
      let un009D = call _mml_print (" = ")
      let _t18009E = apply $intToString_code0095 (fib_n0099)
      let un009F = call _mml_print (_t18009E)
      let un00A0 = call _mml_print ("\n")
      ret 0
   }
}
