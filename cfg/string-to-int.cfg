ptr $intToString_code010E: {
   fun $intToString_code010E (intToString01A1, i01A2) {
      goto $intToString_code010B_hdr01A0 (intToString01A1, i01A2)
   }
   and $intToString_code010B_hdr01A0 (intToString01A3, i01A4) {
      if IntLt (i01A4, 0)
         then goto $then01A5 (i01A4, intToString01A3)
         else goto $else01AB (i01A4, intToString01A3)
   }
   and $else01AB (i01AC, intToString01AD) {
      if IntEq (i01AC, 0)
         then goto $then01AE ()
         else goto $else01AF (i01AC, intToString01AD)
   }
   and $else01AF (i01B0, intToString01B1) {
      if IntEq (i01B0, 1)
         then goto $then01B2 ()
         else goto $else01B3 (i01B0, intToString01B1)
   }
   and $else01B3 (i01B4, intToString01B5) {
      if IntEq (i01B4, 2)
         then goto $then01B6 ()
         else goto $else01B7 (i01B4, intToString01B5)
   }
   and $else01B7 (i01B8, intToString01B9) {
      if IntEq (i01B8, 3)
         then goto $then01BA ()
         else goto $else01BB (i01B8, intToString01B9)
   }
   and $else01BB (i01BC, intToString01BD) {
      if IntEq (i01BC, 4)
         then goto $then01BE ()
         else goto $else01BF (i01BC, intToString01BD)
   }
   and $else01BF (i01C0, intToString01C1) {
      if IntEq (i01C0, 5)
         then goto $then01C2 ()
         else goto $else01C3 (i01C0, intToString01C1)
   }
   and $else01C3 (i01C4, intToString01C5) {
      if IntEq (i01C4, 6)
         then goto $then01C6 ()
         else goto $else01C7 (i01C4, intToString01C5)
   }
   and $else01C7 (i01C8, intToString01C9) {
      if IntEq (i01C8, 7)
         then goto $then01CA ()
         else goto $else01CB (i01C8, intToString01C9)
   }
   and $else01CB (i01CC, intToString01CD) {
      if IntEq (i01CC, 8)
         then goto $then01CE ()
         else goto $else01CF (i01CC, intToString01CD)
   }
   and $else01CF (i01D0, intToString01D1) {
      if IntEq (i01D0, 9)
         then goto $then01D2 ()
         else goto $else01D3 (i01D0, intToString01D1)
   }
   and $else01D3 (i01D4, intToString01D5) {
      if IntNEq (10, 0)
         then goto $then01EA (i01D4, intToString01D5)
         else goto $else01EE (i01D4, intToString01D5)
   }
   and $else01EE (i01EF, intToString01F0) {
      let _t601F1 = call _mml_fail ("Divide by zero")
      goto $join01D6 (_t601F1, i01EF, intToString01F0)
   }
   and $then01EA (i01EB, intToString01EC) {
      let _t501ED = IntDiv (i01EB,10)
      goto $join01D6 (_t501ED, i01EB, intToString01EC)
   }
   and $join01D6 (_t401D7, i01D8, intToString01D9) {
      let _t301DA = apply $intToString_code010E (intToString01D9,_t401D7)
      if IntNEq (10, 0)
         then goto $then01E1 (i01D8, _t301DA, intToString01D9)
         else goto $else01E6 (_t301DA, intToString01D9)
   }
   and $else01E6 (_t301E7, intToString01E8) {
      let _t1001E9 = call _mml_fail ("Remainder by zero")
      goto $join01DB (_t1001E9, _t301E7, intToString01E8)
   }
   and $then01E1 (i01E2, _t301E3, intToString01E4) {
      let _t901E5 = IntMod (i01E2,10)
      goto $join01DB (_t901E5, _t301E3, intToString01E4)
   }
   and $join01DB (_t801DC, _t301DD, intToString01DE) {
      let _t701DF = apply $intToString_code010E (intToString01DE,_t801DC)
      let _t1101E0 = call _mml_concat (_t301DD,_t701DF)
      ret _t1101E0
   }
   and $then01D2 () {
      ret "9"
   }
   and $then01CE () {
      ret "8"
   }
   and $then01CA () {
      ret "7"
   }
   and $then01C6 () {
      ret "6"
   }
   and $then01C2 () {
      ret "5"
   }
   and $then01BE () {
      ret "4"
   }
   and $then01BA () {
      ret "3"
   }
   and $then01B6 () {
      ret "2"
   }
   and $then01B2 () {
      ret "1"
   }
   and $then01AE () {
      ret "0"
   }
   and $then01A5 (i01A6, intToString01A7) {
      let _t101A8 = IntNeg (i01A6)
      let _t001A9 = apply $intToString_code010E (intToString01A7,_t101A8)
      let _t201AA = call _mml_concat ("-",_t001A9)
      ret _t201AA
   }
}
ptr $optionToString1_code0110: {
   fun $optionToString1_code0110 (optionToString10193, opt0194) {
      let aToString0195 = #1(optionToString10193)
      if Boxed (opt0194)
         then goto $boxed0198 (opt0194, aToString0195)
         else goto $unboxed0196 (opt0194)
   }
   and $boxed0198 (opt0199, aToString019A) {
      let x019B = #0(opt0199)
      let cp019C = #0(aToString019A)
      let _t13019D = apply cp019C (aToString019A,x019B)
      let _t12019E = call _mml_concat (_t13019D,")")
      let _t14019F = call _mml_concat ("Some(",_t12019E)
      ret _t14019F
   }
   and $unboxed0196 (opt0197) {
      ret "None"
   }
}
ptr $optionToString_code010F: {
   fun $optionToString_code010F (aToString0191) {
      let optionToString10192 = alloc [$optionToString1_code0110,aToString0191]
      ret optionToString10192
   }
}
any $charToDigit_code0111: {
   fun $charToDigit_code0111 (charToDigit0182, c0183) {
      let ord00184 = #0(charToDigit0182)
      let ord90185 = #1(charToDigit0182)
      if IntLte (ord00184, c0183)
         then goto $then0186 (c0183, ord00184, ord90185)
         else goto $else0190 ()
   }
   and $else0190 () {
      ret 0
   }
   and $then0186 (c0187, ord00188, ord90189) {
      if IntLte (c0187, ord90189)
         then goto $then018A (c0187, ord00188)
         else goto $else018F ()
   }
   and $else018F () {
      ret 0
   }
   and $then018A (c018B, ord0018C) {
      let _t21018D = IntSub (c018B,ord0018C)
      let _t22018E = alloc [_t21018D]
      ret _t22018E
   }
}
any $loop_code0113: {
   fun $loop_code0113 (loop014F, tpl0150) {
      goto $loop_code00FE_hdr014E (loop014F, tpl0150)
   }
   and $loop_code00FE_hdr014E (loop0151, tpl0152) {
      let charToDigit0153 = #0(loop0151)
      let s0154 = #1(loop0151)
      let sz0155 = #2(loop0151)
      let pos0156 = #0(tpl0152)
      let acc0157 = #1(tpl0152)
      if IntLt (pos0156, sz0155)
         then goto $then0158 (pos0156, acc0157, loop0151, charToDigit0153, s0154)
         else goto $else017F (acc0157)
   }
   and $else017F (acc0180) {
      let _t320181 = alloc [acc0180]
      ret _t320181
   }
   and $then0158 (pos0159, acc015A, loop015B, charToDigit015C, s015D) {
      let _t25015E = StrSize (s015D)
      if UIntLt (pos0159, _t25015E)
         then goto $then0172 (pos0159, acc015A, loop015B, charToDigit015C, s015D)
         else goto $else0179 (pos0159, acc015A, loop015B, charToDigit015C)
   }
   and $else0179 (pos017A, acc017B, loop017C, charToDigit017D) {
      let _t27017E = call _mml_fail ("Subscript out of bounds")
      goto $join015F (_t27017E, pos017A, acc017B, loop017C, charToDigit017D)
   }
   and $then0172 (pos0173, acc0174, loop0175, charToDigit0176, s0177) {
      let _t260178 = StrSub (s0177,pos0173)
      goto $join015F (_t260178, pos0173, acc0174, loop0175, charToDigit0176)
   }
   and $join015F (_t240160, pos0161, acc0162, loop0163, charToDigit0164) {
      let _t230165 = apply $charToDigit_code0111 (charToDigit0164,_t240160)
      if Boxed (_t230165)
         then goto $boxed0168 (_t230165, pos0161, acc0162, loop0163)
         else goto $unboxed0166 (_t230165)
   }
   and $boxed0168 (_t230169, pos016A, acc016B, loop016C) {
      let i016D = #0(_t230169)
      let _t29016E = IntAdd (pos016A,1)
      let _t31016F = IntMul (acc016B,10)
      let _t300170 = IntAdd (_t31016F,i016D)
      let _t280171 = alloc [_t29016E,_t300170]
      goto $loop_code00FE_hdr014E (loop016C, _t280171)
   }
   and $unboxed0166 (_t230167) {
      ret 0
   }
}
any $stringToInt_code0112: {
   fun $stringToInt_code0112 (stringToInt0145, s0146) {
      let charToDigit0147 = #0(stringToInt0145)
      let sz0148 = StrSize (s0146)
      let loop0149 = alloc [charToDigit0147,s0146,sz0148]
      if IntLt (0, sz0148)
         then goto $then014A (loop0149)
         else goto $else014D ()
   }
   and $else014D () {
      ret 0
   }
   and $then014A (loop014B) {
      let _t33014C = alloc [0,0]
      apply $loop_code0113 (loop014B, _t33014C)
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments0115) {
      let intToString0116 = alloc [$intToString_code010E]
      let _t150117 = StrSize ("0")
      if UIntLt (0, _t150117)
         then goto $then013D (arguments0115, intToString0116)
         else goto $else0141 (arguments0115, intToString0116)
   }
   and $else0141 (arguments0142, intToString0143) {
      let _t170144 = call _mml_fail ("Subscript out of bounds")
      goto $join0118 (_t170144, arguments0142, intToString0143)
   }
   and $then013D (arguments013E, intToString013F) {
      let _t160140 = StrSub ("0",0)
      goto $join0118 (_t160140, arguments013E, intToString013F)
   }
   and $join0118 (ord00119, arguments011A, intToString011B) {
      let _t18011C = StrSize ("9")
      if UIntLt (0, _t18011C)
         then goto $then0133 (arguments011A, intToString011B, ord00119)
         else goto $else0138 (arguments011A, intToString011B, ord00119)
   }
   and $else0138 (arguments0139, intToString013A, ord0013B) {
      let _t20013C = call _mml_fail ("Subscript out of bounds")
      goto $join011D (_t20013C, arguments0139, intToString013A, ord0013B)
   }
   and $then0133 (arguments0134, intToString0135, ord00136) {
      let _t190137 = StrSub ("9",0)
      goto $join011D (_t190137, arguments0134, intToString0135, ord00136)
   }
   and $join011D (ord9011E, arguments011F, intToString0120, ord00121) {
      let charToDigit0122 = alloc [ord00121,ord9011E]
      let stringToInt0123 = alloc [charToDigit0122]
      if Boxed (arguments011F)
         then goto $boxed0128 (arguments011F, intToString0120, stringToInt0123)
         else goto $unboxed0126 (arguments011F)
   }
   and $boxed0128 (arguments0129, intToString012A, stringToInt012B) {
      let s012C = #0(arguments0129)
      let _t35012D = apply $optionToString_code010F (intToString012A)
      let _t36012E = apply $stringToInt_code0112 (stringToInt012B,s012C)
      let cp012F = #0(_t35012D)
      let _t340130 = apply cp012F (_t35012D,_t36012E)
      let un0131 = call _mml_print (_t340130)
      let _t370132 = call _mml_print ("\n")
      goto $join0124 (_t370132)
   }
   and $unboxed0126 (arguments0127) {
      goto $join0124 (0)
   }
   and $join0124 (un0125) {
      ret 0
   }
}
