ptr $intToString_code014C: {
   fun $intToString_code014C (i01BC) {
      goto $intToString_code012B_hdr01BB (i01BC)
   }
   and $intToString_code012B_hdr01BB (i01BD) {
      if IntLt (i01BD, 0)
         then goto $then01BE (i01BD)
         else goto $else01C3 (i01BD)
   }
   and $else01C3 (i01C4) {
      if IntEq (i01C4, 0)
         then goto $then01C5 ()
         else goto $else01C6 (i01C4)
   }
   and $else01C6 (i01C7) {
      if IntEq (i01C7, 1)
         then goto $then01C8 ()
         else goto $else01C9 (i01C7)
   }
   and $else01C9 (i01CA) {
      if IntEq (i01CA, 2)
         then goto $then01CB ()
         else goto $else01CC (i01CA)
   }
   and $else01CC (i01CD) {
      if IntEq (i01CD, 3)
         then goto $then01CE ()
         else goto $else01CF (i01CD)
   }
   and $else01CF (i01D0) {
      if IntEq (i01D0, 4)
         then goto $then01D1 ()
         else goto $else01D2 (i01D0)
   }
   and $else01D2 (i01D3) {
      if IntEq (i01D3, 5)
         then goto $then01D4 ()
         else goto $else01D5 (i01D3)
   }
   and $else01D5 (i01D6) {
      if IntEq (i01D6, 6)
         then goto $then01D7 ()
         else goto $else01D8 (i01D6)
   }
   and $else01D8 (i01D9) {
      if IntEq (i01D9, 7)
         then goto $then01DA ()
         else goto $else01DB (i01D9)
   }
   and $else01DB (i01DC) {
      if IntEq (i01DC, 8)
         then goto $then01DD ()
         else goto $else01DE (i01DC)
   }
   and $else01DE (i01DF) {
      if IntEq (i01DF, 9)
         then goto $then01E0 ()
         else goto $else01E1 (i01DF)
   }
   and $else01E1 (i01E2) {
      if IntNEq (10, 0)
         then goto $then01F3 (i01E2)
         else goto $else01F6 (i01E2)
   }
   and $else01F6 (i01F7) {
      let _t601F8 = call _mml_fail ("Divide by zero")
      goto $join01E3 (_t601F8, i01F7)
   }
   and $then01F3 (i01F4) {
      let _t501F5 = IntDiv (i01F4,10)
      goto $join01E3 (_t501F5, i01F4)
   }
   and $join01E3 (_t401E4, i01E5) {
      let _t301E6 = apply $intToString_code014C (_t401E4)
      if IntNEq (10, 0)
         then goto $then01EC (i01E5, _t301E6)
         else goto $else01F0 (_t301E6)
   }
   and $else01F0 (_t301F1) {
      let _t1001F2 = call _mml_fail ("Remainder by zero")
      goto $join01E7 (_t1001F2, _t301F1)
   }
   and $then01EC (i01ED, _t301EE) {
      let _t901EF = IntMod (i01ED,10)
      goto $join01E7 (_t901EF, _t301EE)
   }
   and $join01E7 (_t801E8, _t301E9) {
      let _t701EA = apply $intToString_code014C (_t801E8)
      let _t1101EB = call _mml_concat (_t301E9,_t701EA)
      ret _t1101EB
   }
   and $then01E0 () {
      ret "9"
   }
   and $then01DD () {
      ret "8"
   }
   and $then01DA () {
      ret "7"
   }
   and $then01D7 () {
      ret "6"
   }
   and $then01D4 () {
      ret "5"
   }
   and $then01D1 () {
      ret "4"
   }
   and $then01CE () {
      ret "3"
   }
   and $then01CB () {
      ret "2"
   }
   and $then01C8 () {
      ret "1"
   }
   and $then01C5 () {
      ret "0"
   }
   and $then01BE (i01BF) {
      let _t101C0 = IntNeg (i01BF)
      let _t001C1 = apply $intToString_code014C (_t101C0)
      let _t201C2 = call _mml_concat ("-",_t001C1)
      ret _t201C2
   }
}
any $foldl2_code014F: {
   fun $foldl2_code014F (foldl201A6, l01A7) {
      let f01A8 = #1(foldl201A6)
      let b01A9 = #2(foldl201A6)
      if Boxed (l01A7)
         then goto $boxed01AD (l01A7, f01A8, b01A9)
         else goto $unboxed01AA (l01A7, b01A9)
   }
   and $boxed01AD (l01AE, f01AF, b01B0) {
      let hd01B1 = #0(l01AE)
      let tl01B2 = #1(l01AE)
      let _t1201B3 = apply $foldl_code014D (f01AF)
      let cp01B4 = #0(f01AF)
      let _t1501B5 = apply cp01B4 (f01AF,hd01B1)
      let cp01B6 = #0(_t1501B5)
      let _t1401B7 = apply cp01B6 (_t1501B5,b01B0)
      let cp01B8 = #0(_t1201B3)
      let _t1301B9 = apply cp01B8 (_t1201B3,_t1401B7)
      let cp01BA = #0(_t1301B9)
      apply cp01BA (_t1301B9, tl01B2)
   }
   and $unboxed01AA (l01AB, b01AC) {
      ret b01AC
   }
}
ptr $foldl1_code014E: {
   fun $foldl1_code014E (foldl101A2, b01A3) {
      let f01A4 = #1(foldl101A2)
      let foldl201A5 = alloc [$foldl2_code014F,f01A4,b01A3]
      ret foldl201A5
   }
}
ptr $foldl_code014D: {
   fun $foldl_code014D (f01A0) {
      let foldl101A1 = alloc [$foldl1_code014E,f01A0]
      ret foldl101A1
   }
}
any $cons1_code0152: {
   fun $cons1_code0152 (cons1019C, tl019D) {
      let hd019E = #1(cons1019C)
      let _t16019F = alloc [hd019E,tl019D]
      ret _t16019F
   }
}
ptr $cons_code0151: {
   fun $cons_code0151 (cons0199, hd019A) {
      let cons1019B = alloc [$cons1_code0152,hd019A]
      ret cons1019B
   }
}
any $rev_code0150: {
   fun $rev_code0150 (xs0193) {
      let cons0194 = alloc [$cons_code0151]
      let _t170195 = apply $foldl_code014D (cons0194)
      let cp0196 = #0(_t170195)
      let _t180197 = apply cp0196 (_t170195,0)
      let cp0198 = #0(_t180197)
      apply cp0198 (_t180197, xs0193)
   }
}
any $loop_code0154: {
   fun $loop_code0154 (loop017F, tpl0180) {
      goto $loop_code0133_hdr017E (loop017F, tpl0180)
   }
   and $loop_code0133_hdr017E (loop0181, tpl0182) {
      let n0183 = #0(loop0181)
      let f0184 = #1(loop0181)
      let i0185 = #0(tpl0182)
      let acc0186 = #1(tpl0182)
      if IntLte (i0185, n0183)
         then goto $then0187 (i0185, acc0186, loop0181, f0184)
         else goto $else0191 (acc0186)
   }
   and $else0191 (acc0192) {
      apply $rev_code0150 (acc0192)
   }
   and $then0187 (i0188, acc0189, loop018A, f018B) {
      let _t20018C = IntAdd (i0188,1)
      let cp018D = #0(f018B)
      let _t22018E = apply cp018D (f018B,i0188)
      let _t21018F = alloc [_t22018E,acc0189]
      let _t190190 = alloc [_t20018C,_t21018F]
      goto $loop_code0133_hdr017E (loop018A, _t190190)
   }
}
any $tabulate_code0153: {
   fun $tabulate_code0153 (tpl0175) {
      let n0176 = #0(tpl0175)
      let f0177 = #1(tpl0175)
      let loop0178 = alloc [n0176,f0177]
      if IntLt (n0176, 0)
         then goto $then0179 ()
         else goto $else017B (loop0178)
   }
   and $else017B (loop017C) {
      let _t24017D = alloc [0,0]
      apply $loop_code0154 (loop017C, _t24017D)
   }
   and $then0179 () {
      let _t23017A = call _mml_fail ("tabulate: n < 0")
      ret _t23017A
   }
}
i63 $f1_code0156: {
   fun $f1_code0156 (f10171, y0172) {
      let x0173 = #1(f10171)
      let _t250174 = IntAdd (x0173,y0172)
      ret _t250174
   }
}
ptr $f_code0155: {
   fun $f_code0155 (f016E, x016F) {
      let f10170 = alloc [$f1_code0156,x016F]
      ret f10170
   }
}
any $g_code0157: {
   fun $g_code0157 (g016C, i016D) {
      ret i016D
   }
}
i63 $_mml_entry: {
   fun $_mml_entry (arguments0159) {
      let f015A = alloc [$f_code0155]
      let g015B = alloc [$g_code0157]
      let _t26015C = apply $foldl_code014D (f015A)
      let cp015D = #0(_t26015C)
      let _t27015E = apply cp015D (_t26015C,0)
      let _t29015F = alloc [4999,g015B]
      let _t280160 = apply $tabulate_code0153 (_t29015F)
      let cp0161 = #0(_t27015E)
      let sum_n0162 = apply cp0161 (_t27015E,_t280160)
      let un0163 = call _mml_print ("foldl \n")
      let un0164 = call _mml_print ("      (fn x y => x + y)\n")
      let un0165 = call _mml_print ("      0 (tabulate (")
      let _t300166 = apply $intToString_code014C (4999)
      let un0167 = call _mml_print (_t300166)
      let un0168 = call _mml_print (", (fn i => i))) = ")
      let _t310169 = apply $intToString_code014C (sum_n0162)
      let un016A = call _mml_print (_t310169)
      let un016B = call _mml_print ("\n")
      ret 0
   }
}
